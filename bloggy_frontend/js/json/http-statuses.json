[
  {
    "title": "Continue",
    "category": "1×× Informational",
    "excerpt": "The initial part of a request has been received and has not yet been rejected by the server. The server intends to send a final response after the request has been fully received and acted upon.",
    "description": "<p>When the request contains an Expect header field that includes a 100-continue expectation, the 100 response indicates that the server wishes to receive the request payload body<sup><a href=\"#ref-1\">1</a></sup>. The client ought to continue sending the request and discard the 100 response.</p><p>If the request did not contain an Expect header field containing the 100-continue expectation, the client can simply discard this interim response.</p>",
    "wikipedia": "This means that the server has received the request headers, and that the client should proceed to send the request body (in the case of a request for which a body needs to be sent; for example, a POST request). If the request body is large, sending it to a server when a request has already been rejected based upon inappropriate headers is inefficient. To have a server check if the request could be accepted based on the request's headers alone, a client must send Expect: 100-continue as a header in its initial request and check if a 100 Continue status code is received in response before continuing (or receive 417 Expectation Failed and not continue).",
    "code": "100",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-5.1.1",
        "title": "RFC7231 Section 5.1.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.2.1",
        "title": "RFC7231 Section 6.1.1"
      }
    ]
  },
  {
    "title": "Switching Protocols",
    "category": "1×× Informational",
    "excerpt": "The server understands and is willing to comply with the client's request, via the Upgrade header field1, for a change in the application protocol being used on this connection.",
    "description": "<p>The server MUST generate an Upgrade header field in the response that indicates which protocol(s) will be switched to immediately after the empty line that terminates the 101 response.</p><p>It is assumed that the server will only agree to switch protocols when it is advantageous to do so. For example, switching to a newer version of HTTP might be advantageous over older versions, and switching to a real-time, synchronous protocol might be advantageous when delivering resources that use such features.</p>",
    "code": "101",
    "wikipedia": "This means the requester has asked the server to switch protocols and the server is acknowledging that it will do so.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-6.7",
        "title": "RFC7230 Section 6.7"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.2.2",
        "title": "RFC7231 Section 6.2.2"
      }
    ]
  },
  {
    "title": "Processing",
    "category": "1×× Informational",
    "excerpt": "An interim response used to inform the client that the server has accepted the complete request, but has not yet completed it.",
    "description": "<p>This status code SHOULD only be sent when the server has a reasonable expectation that the request will take significant time to complete. As guidance, if a method is taking longer than 20 seconds (a reasonable, but arbitrary value) to process the server SHOULD return a 102 (Processing) response. The server MUST send a final response after the request has been completed.</p><p>Methods can potentially take a long period of time to process, especially methods that support the Depth header. In such cases the client may time-out the connection while waiting for a response. To prevent this the server may return a 102 Processing status code to indicate to the client that the server is still processing the method.</p>",
    "code": "102",
    "wikipedia": "As a WebDAV request may contain many sub-requests involving file operations, it may take a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet. This prevents the client from timing out and assuming the request was lost.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc2518#section-10.1",
        "title": "RFC2518 Section 10.1"
      }
    ]
  },
  {
    "title": "OK",
    "category": "2×× Success",
    "excerpt": "The request has succeeded.",
    "description": "<p>The payload sent in a 200 response depends on the request method. For the methods defined by this specification, the intended meaning of the payload can be summarized as:</p><p>Aside from responses to CONNECT, a 200 response always has a payload, though an origin server MAY generate a payload body of zero length. If no payload is desired, an origin server ought to send <a href=\"/resources/http-status-codes/204\">204 No Content</a> instead. For CONNECT, no payload is allowed because the successful result is a tunnel, which begins immediately after the 200 response header section.</p><p>A 200 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "200",
    "wikipedia": "<p>Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action.</p><p>General status code. Most common code used to indicate success.</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.1",
        "title": "RFC7231 Section 6.3.1"
      }
    ]
  },
  {
    "title": "Created",
    "category": "2×× Success",
    "excerpt": "The request has been fulfilled and has resulted in one or more new resources being created.",
    "description": "<p>The primary resource created by the request is identified by either a Location header field in the response or, if no Location field is received, by the effective request URI.</p><p>The 201 response payload typically describes and links to the resource(s) created. See <a href=\"https://tools.ietf.org/html/rfc7231#section-7.2\">Section 7.2 of RFC7231</a> for a discussion of the meaning and purpose of validator header fields, such as ETag and Last-Modified, in a 201 response.</p>",
    "code": "201",
    "wikipedia": "<p>The request has been fulfilled and resulted in a new resource being created.</p><p>Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource (on POST). Response body content may or may not be present.</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.2",
        "title": "RFC7231 Section 6.3.2"
      }
    ]
  },
  {
    "title": "Accepted",
    "category": "2×× Success",
    "excerpt": "The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.",
    "description": "<p>There is no facility in HTTP for re-sending a status code from an asynchronous operation.</p><p>The 202 response is intentionally noncommittal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent's connection to the server persist until the process is completed. The representation sent with this response ought to describe the request's current status and point to (or embed) a status monitor that can provide the user with an estimate of when the request will be fulfilled.</p>",
    "code": "202",
    "wikipedia":"The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.3",
        "title": "RFC7231 Section 6.3.3"
      }
    ]
  },
  {
    "title": "Non-authoritative Information",
    "category": "2×× Success",
    "excerpt": "The request was successful but the enclosed payload has been modified from that of the origin server's 200 OK response by a transforming proxy.",
    "description": "<p>This status code allows the proxy to notify recipients when a transformation has been applied, since that knowledge might impact later decisions regarding the content. For example, future cache validation requests for the content might only be applicable along the same request path (through the same proxies).</p><p>The 203 response is similar to the Warning code of 214 Transformation Applied<sup><a href=\"#ref-2\">2</a></sup>, which has the advantage of being applicable to responses with any status code.</p><p>A 203 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-3\">3</a></sup>.</p>",
    "code": "203",
    "wikipedia":"<p>The server successfully processed the request, but is returning information that may be from another source.</p><p>Not present in HTTP/1.0: available since HTTP/1.1</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-5.7.2",
        "title": "RFC7230 Section 5.7.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-5.5",
        "title": "RFC7234 Section 5.5"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.4",
        "title": "RFC7231 Section 6.3.4"
      }
    ]
  },
  {
    "title": "No Content",
    "category": "2×× Success",
    "excerpt": "The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.",
    "description": "<p>Metadata in the response header fields refer to the target resource and its selected representation after the requested action was applied.</p><p>For example, if a 204 status code is received in response to a PUT request and the response contains an ETag header field, then the PUT was successful and the ETag field-value contains the entity-tag for the new representation of that target resource.</p><p>The 204 response allows a server to indicate that the action has been successfully applied to the target resource, while implying that the user agent does not need to traverse away from its current \"document view\" (if any). The server assumes that the user agent will provide some indication of the success to its user, in accord with its own interface, and apply any new or updated metadata in the response to its active representation.</p><p>For example, a 204 status code is commonly used with document editing interfaces corresponding to a \"save\" action, such that the document being saved remains available to the user for editing. It is also frequently used with interfaces that expect automated data transfers to be prevalent, such as within distributed version control systems.</p><p>A 204 response is terminated by the first empty line after the header fields because it cannot contain a message body.</p><p>A 204 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "204",
    "wikipedia":"<p>The server successfully processed the request, but is not returning any content.</p><p>Status when wrapped responses (e.g. JSEND) are not used and nothing is in the body (e.g. DELETE).</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.5",
        "title": "RFC7231 Section 6.3.5"
      }
    ]
  },
  {
    "title": "Reset Content",
    "category": "2×× Success",
    "excerpt": "The server has fulfilled the request and desires that the user agent reset the \"document view\", which caused the request to be sent, to its original state as received from the origin server.",
    "description": "<p>This response is intended to support a common data entry use case where the user receives content that supports data entry (a form, notepad, canvas, etc.), enters or manipulates data in that space, causes the entered data to be submitted in a request, and then the data entry mechanism is reset for the next entry so that the user can easily initiate another input action.</p><p>Since the 205 status code implies that no additional content will be provided, a server MUST NOT generate a payload in a 205 response. In other words, a server MUST do one of the following for a 205 response: a) indicate a zero-length body for the response by including a Content-Length header field with a value of 0; b) indicate a zero-length payload for the response by including a Transfer-Encoding header field with a value of chunked and a message body consisting of a single chunk of zero-length; or, c) close the connection immediately after sending the blank line terminating the header section.</p>",
    "code": "205",
    "wikipedia":"The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.3.6",
        "title": "RFC7231 Section 6.3.6"
      }
    ]
  },
  {
    "title": "Partial Content",
    "category": "2×× Success",
    "excerpt": "The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the request's Range header field.",
    "description": "<p>If a single part is being transferred, the server generating the 206 response MUST generate a Content-Range header field, describing what range of the selected representation is enclosed, and a payload consisting of the range. For example:</p><p>If multiple parts are being transferred, the server generating the 206 response MUST generate a \"multipart/byteranges\" payload<sup><a href=\"#ref-2\">2</a></sup>, and a Content-Type header field containing the multipart/byteranges media type and its required boundary parameter. To avoid confusion with single-part responses, a server MUST NOT generate a Content-Range header field in the HTTP header section of a multiple part response (this field will be sent in each part instead).</p><p>Within the header area of each body part in the multipart payload, the server MUST generate a Content-Range header field corresponding to the range being enclosed in that body part. If the selected representation would have had a Content-Type header field in a <a href=\"/resources/http-status-codes/200\">200 OK</a> response, the server SHOULD generate that same Content-Type field in the header area of each body part. For example:</p><p>When multiple ranges are requested, a server MAY coalesce any of the ranges that overlap, or that are separated by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's media type and the chosen boundary parameter length, it can be less efficient to transfer many small disjoint parts than it is to transfer the entire selected representation.</p><p>A server MUST NOT generate a multipart response to a request for a single range, since a client that does not request multiple parts might not support multipart responses. However, a server MAY generate a multipart/byteranges payload with only a single body part if multiple ranges were requested and only one range was found to be satisfiable or only one range remained after coalescing. A client that cannot process a multipart/byteranges response MUST NOT generate a request that asks for multiple ranges.</p><p>When a multipart response payload is generated, the server SHOULD send the parts in the same order that the corresponding byte-range-spec appeared in the received Range header field, excluding those ranges that were deemed unsatisfiable or that were coalesced into other ranges. A client that receives a multipart response MUST inspect the Content-Range header field present in each body part in order to determine which range is contained in that body part; a client cannot rely on receiving the same ranges that it requested, nor the same order that it requested.</p><p>When a 206 response is generated, the server MUST generate the following header fields, in addition to those required above, if the field would have been sent in a <a href=\"/resources/http-status-codes/200\">200 OK</a> response to the same request: Date, Cache-Control, ETag, Expires, Content-Location, and Vary.</p><p>If a 206 is generated in response to a request with an If-Range header field, the sender SHOULD NOT generate other representation header fields beyond those required above, because the client is understood to already have a prior response containing those header fields. Otherwise, the sender MUST generate all of the representation header fields that would have been sent in a <a href=\"/resources/http-status-codes/200\">200 OK</a> response to the same request.</p><p>A 206 response is cacheable by default; i.e., unless otherwise indicated by explicit cache controls<sup><a href=\"#ref-3\">3</a></sup>.</p>",
    "code": "206",
    "wikipedia":"The server is delivering only part of the resource due to a range header sent by the client. The range header is used by tools like wget to enable resuming of interrupted downloads, or split a download into multiple simultaneous streams.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7233#section-3.1",
        "title": "RFC7233 Section 3.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7233#appendix-A",
        "title": "RFC7233 Appendix A"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7233#section-4.1",
        "title": "RFC7233 Section 4.1"
      }
    ]
  },
  {
    "title": "Multi-Status",
    "category": "2×× Success",
    "excerpt": "A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.",
    "description": "<p>The default Multi-Status response body is a text/xml or application/xml HTTP entity with a 'multistatus' root element. Further elements contain 200, 300, 400, and 500 series status codes generated during the method invocation. 100 series status codes SHOULD NOT be recorded in a 'response' XML element.</p><p>Although '207' is used as the overall response status code, the recipient needs to consult the contents of the multistatus response body for further information about the success or failure of the method execution. The response MAY be used in success, partial success and also in failure situations.</p><p>The 'multistatus' root element holds zero or more 'response' elements in any order, each with information about an individual resource. Each 'response' element MUST have an 'href' element to identify the resource.</p><p>A Multi-Status response uses one out of two distinct formats for representing the status:</p><p>1. A 'status' element as child of the 'response' element indicates the status of the message execution for the identified resource as a whole<sup><a href=\"#ref-1\">1</a></sup>. Some method definitions provide information about specific status codes clients should be prepared to see in a response. However, clients MUST be able to handle other status codes, using the generic rules defined in <a href=\"https://tools.ietf.org/html/rfc2616#section-10\">RFC2616 Section 10</a>.</p><p>2. For PROPFIND and PROPPATCH, the format has been extended using the 'propstat' element instead of 'status', providing information about individual properties of a resource. This format is specific to PROPFIND and PROPPATCH, and is described in detail in <a href=\"https://tools.ietf.org/html/rfc4918#section-9.1\">RFC4918 Section 9.1</a> and <a href=\"https://tools.ietf.org/html/rfc4918#section-9.2\">RFC4918 Section 9.2</a>.</p>",
    "code": "207",
    "wikipedia":"The message body that follows is an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-9.6.2",
        "title": "RFC4918 Section 9.6.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-13",
        "title": "RFC4918 Section 13"
      }
    ]
  },
  {
    "title": "Already Reported",
    "category": "2×× Success",
    "excerpt": "Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.",
    "description": "<p>For each binding to a collection inside the request's scope, only one will be reported with a 200 status, while subsequent DAV:response elements for all other bindings will use the 208 status, and no DAV:response elements for their descendants are included.</p><p>Note that the 208 status will only occur for \"Depth: infinity\" requests, and that it is of particular importance when the multiple collection bindings cause a bind loop<sup><a href=\"#ref-1\">1</a></sup>.</p><p>A client can request the DAV:resource-id property in a PROPFIND request to guarantee that they can accurately reconstruct the binding structure of a collection with multiple bindings to a single resource.</p><p>For backward compatibility with clients not aware of the 208 status code appearing in multistatus response bodies, it SHOULD NOT be used unless the client has signaled support for this specification using the \"DAV\" request header<sup><a href=\"#ref-2\">2</a></sup>. Instead, a <a href=\"/resources/http-status-codes/508\">508 Loop Detected</a> status should be returned when a binding loop is discovered. This allows the server to return the 508 as the top-level return status, if it discovers it before it started the response, or in the middle of a multistatus, if it discovers it in the middle of streaming out a multistatus response.</p>",
    "code": "208",
    "wikipedia":"The members of a DAV binding have already been enumerated in a previous reply to this request, and are not being included again.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc5842#section-2.2",
        "title": "RFC5842 Section 2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc5842#section-8.2",
        "title": "RFC5842 Section 8.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc5842#section-7.1",
        "title": "RFC5842 Section 7.1"
      }
    ]
  },
  {
    "title": "IM Used",
    "category": "2×× Success",
    "excerpt": "The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.",
    "description": "<p>The actual current instance might not be available except by combining this response with other previous or future responses, as appropriate for the specific instance-manipulation(s). If so, the headers of the resulting instance are the result of combining the headers from the 226 response and the other instances, following the rules in <a href=\"https://tools.ietf.org/html/rfc2616#section-13.5.3\">section 13.5.3</a> of the HTTP/1.1 specification.</p><p>The request MUST have included an A-IM header field listing at least one instance-manipulation. The response MUST include an Etag header field giving the entity tag of the current instance.</p><p>A response received with a status code of 226 MAY be stored by a cache and used in reply to a subsequent request, subject to the HTTP expiration mechanism and any Cache-Control headers, and to the requirements in <a href=\"https://tools.ietf.org/html/rfc3229#section-10.6\">section 10.6</a>.</p><p>A response received with a status code of 226 MAY be used by a cache, in conjunction with a cache entry for the base instance, to create a cache entry for the current instance.</p>",
    "code": "226",
    "wikipedia":"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc3229#section-10.4.1",
        "title": "RFC3229 Section 10.4.1"
      }
    ]
  },
  {
    "title": "Multiple Choices",
    "category": "3×× Redirection",
    "excerpt": "The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.",
    "description": "<p>In other words, the server desires that the user agent engage in reactive negotiation to select the most appropriate representation(s) for its needs<sup><a href=\"#ref-1\">1</a></sup>.</p><p>If the server has a preferred choice, the server SHOULD generate a Location header field containing a preferred choice's URI reference. The user agent MAY use the Location field value for automatic redirection.</p><p>For request methods other than HEAD, the server SHOULD generate a payload in the 300 response containing a list of representation metadata and URI reference(s) from which the user or user agent can choose the one most preferred. The user agent MAY make a selection from that list automatically if it understands the provided media type. A specific format for automatic selection is not defined by this specification because HTTP tries to remain orthogonal to the definition of its payloads. In practice, the representation is provided in some easily parsed format believed to be acceptable to the user agent, as determined by shared design or content negotiation, or in some commonly accepted hypertext format.</p><p>A 300 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-2\">2</a></sup>.</p><p>Note: The original proposal for the 300 status code defined the URI header field as providing a list of alternative representations, such that it would be usable for 200, 300, and 406 responses and be transferred in responses to the HEAD method. However, lack of deployment and disagreement over syntax led to both URI and Alternates (a subsequent proposal) being dropped from this specification. It is possible to communicate the list using a set of Link header fields<sup><a href=\"#ref-3\">3</a></sup>, each with a relationship of \"alternate\", though deployment is a chicken-and-egg problem.</p>",
    "code": "300",
    "wikipedia":"Indicates multiple options for the resource that the client may follow. It, for instance, could be used to present different format options for video, list files with different extensions, or word sense disambiguation.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-3.4",
        "title": "RFC7231 Section 3.4"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc5988",
        "title": "RFC5988"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.1",
        "title": "RFC7231 Section 6.4.1"
      }
    ]
  },
  {
    "title": "Moved Permanently",
    "category": "3×× Redirection",
    "excerpt": "The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.",
    "description": "<p>Clients with link-editing capabilities ought to automatically re-link references to the effective request URI to one or more of the new references sent by the server, where possible.</p><p>The server SHOULD generate a Location header field in the response containing a preferred URI reference for the new permanent URI. The user agent MAY use the Location field value for automatic redirection. The server's response payload usually contains a short hypertext note with a hyperlink to the new URI(s).</p><p>Note: For historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the <a href=\"/resources/http-status-codes/307\">307 Temporary Redirect</a> status code can be used instead.</p><p>A 301 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "301",
    "wikipedia":"This and all future requests should be directed to the given URI.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.2",
        "title": "RFC7231 Section 6.4.2"
      }
    ]
  },
  {
    "title": "Found",
    "category": "3×× Redirection",
    "excerpt": "The target resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client ought to continue to use the effective request URI for future requests.",
    "description": "<p>The server SHOULD generate a Location header field in the response containing a URI reference for the different URI. The user agent MAY use the Location field value for automatic redirection. The server's response payload usually contains a short hypertext note with a hyperlink to the different URI(s).</p><p>Note: For historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the <a href=\"/resources/http-status-codes/307\">307 Temporary Redirect</a> status code can be used instead.</p>",
    "code": "302",
    "wikipedia":"This is an example of industry practice contradicting the standard. The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302 with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307 to distinguish between the two behaviours. However, some Web applications and frameworks use the 302 status code as if it were the 303.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.3",
        "title": "RFC7231 Section 6.4.3"
      }
    ]
  },
  {
    "title": "See Other",
    "category": "3×× Redirection",
    "excerpt": "The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.",
    "description": "<p>A user agent can perform a retrieval request targeting that URI (a GET or HEAD request if using HTTP), which might also be redirected, and present the eventual result as an answer to the original request. Note that the new URI in the Location header field is not considered equivalent to the effective request URI.</p><p>This status code is applicable to any HTTP method. It is primarily used to allow the output of a POST action to redirect the user agent to a selected resource, since doing so provides the information corresponding to the POST response in a form that can be separately identified, bookmarked, and cached, independent of the original request.</p><p>A 303 response to a GET request indicates that the origin server does not have a representation of the target resource that can be transferred by the server over HTTP. However, the Location field value refers to a resource that is descriptive of the target resource, such that making a retrieval request on that other resource might result in a representation that is useful to recipients without implying that it represents the original target resource. Note that answers to the questions of what can be represented, what representations are adequate, and what might be a useful description are outside the scope of HTTP.</p><p>Except for responses to a HEAD request, the representation of a 303 response ought to contain a short hypertext note with a hyperlink to the same URI reference provided in the Location header field.</p>",
    "code": "303",
    "wikipedia":"The response to the request can be found under another URI using a GET method. When received in response to a POST (or PUT/DELETE), it should be assumed that the server has received the data and the redirect should be issued with a separate GET message.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.4",
        "title": "RFC7321 Section 6.4.4"
      }
    ]
  },
  {
    "title": "Not Modified",
    "category": "3×× Redirection",
    "excerpt": "A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to false.",
    "description": "<p>In other words, there is no need for the server to transfer a representation of the target resource because the request indicates that the client, which made the request conditional, already has a valid representation; the server is therefore redirecting the client to make use of that stored representation as if it were the payload of a <a href=\"/resources/http-status-codes/200\">200 OK</a> response.</p><p>The server generating a 304 response MUST generate any of the following header fields that would have been sent in a <a href=\"/resources/http-status-codes/200\">200 OK</a> response to the same request: Cache-Control, Content-Location, Date, ETag, Expires, and Vary.</p><p>Since the goal of a 304 response is to minimize information transfer when the recipient already has one or more cached representations, a sender SHOULD NOT generate representation metadata other than the above listed fields unless said metadata exists for the purpose of guiding cache updates (e.g., Last-Modified might be useful if the response does not have an ETag field).</p><p>Requirements on a cache that receives a 304 response are defined in <a href=\"https://tools.ietf.org/html/rfc7234#section-4.3.4\">Section 4.3.4 of RFC7234</a>. If the conditional request originated with an outbound client, such as a user agent with its own cache sending a conditional GET to a shared proxy, then the proxy SHOULD forward the 304 response to that client.</p><p>A 304 response cannot contain a message-body; it is always terminated by the first empty line after the header fields.</p>",
    "code": "304",
    "wikipedia":"<p>Indicates the resource has not been modified since last requested. Typically, the HTTP client provides a header like the If-Modified-Since header to provide a time against which to compare. Using this saves bandwidth and reprocessing on both the server and client, as only the header data must be sent and received in comparison to the entirety of the page being re-processed by the server, then sent again using more bandwidth of the server and client.</p><p>Used for conditional GET calls to reduce band-width usage. If used, must set the Date, Content-Location, ETag headers to what they would have been on a regular GET call. There must be no body on the response.</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7232#section-4.1",
        "title": "RFC7232 Section 4.1"
      }
    ]
  },
  {
    "title": "Use Proxy",
    "category": "3×× Redirection",
    "excerpt": "Defined in a previous version of this specification and is now deprecated, due to security concerns regarding in-band configuration of a proxy.",
    "description": "",
    "code": "305",
    "wikipedia":"Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.5",
        "title": "RFC7231 Section 6.4.5"
      }
    ]
  },
  {
    "title": "Temporary Redirect",
    "category": "3×× Redirection",
    "excerpt": "The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.",
    "description": "<p>Since the redirection can change over time, the client ought to continue using the original effective request URI for future requests.</p><p>The server SHOULD generate a Location header field in the response containing a URI reference for the different URI. The user agent MAY use the Location field value for automatic redirection. The server's response payload usually contains a short hypertext note with a hyperlink to the different URI(s).</p><p>Note: This status code is similar to 302 Found, except that it does not allow changing the request method from POST to GET. This specification defines no equivalent counterpart for <a href=\"/resources/http-status-codes/301\">301 Moved Permanently</a> (<a href=\"https://tools.ietf.org/html/rfc7238\">RFC7238</a>, however, proposes defining the status code <a href=\"/resources/http-status-codes/308\">308 Permanent Redirect</a> for this purpose).</p>",
    "code": "307",
    "wikipedia":"In this case, the request should be repeated with another URI; however, future requests can still use the original URI. In contrast to 302, the request method should not be changed when reissuing the original request. For instance, a POST request must be repeated using another POST request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.4.7",
        "title": "RFC7231 Section 6.4.7"
      }
    ]
  },
  {
    "title": "Permanent Redirect",
    "category": "3×× Redirection",
    "excerpt": "The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.",
    "description": "<p>Clients with link editing capabilities ought to automatically re-link references to the effective request URI<sup><a href=\"#ref-1\">1</a></sup> to one or more of the new references sent by the server, where possible.</p><p>The server SHOULD generate a Location header field<sup><a href=\"#ref-2\">2</a></sup> in the response containing a preferred URI reference for the new permanent URI. The user agent MAY use the Location field value for automatic redirection. The server's response payload usually contains a short hypertext note with a hyperlink to the new URI(s).</p><p>A 308 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-3\">3</a></sup>.</p><p>Note: This status code is similar to <a href=\"/resources/http-status-codes/301\">301 Moved Permanently</a>, except that it does not allow changing the request method from POST to GET.</p>",
    "code": "308",
    "wikipedia":"The request, and all future requests should be repeated using another URI. 307 and 308 (as proposed) parallel the behaviours of 302 and 301, but do not require the HTTP method to change. So, for example, submitting a form to a permanently redirected resource may continue smoothly.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-5.5",
        "title": "RFC7230 Section 5.5"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-7.1.2",
        "title": "RFC7231 Section 7.1.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7538#section-3",
        "title": "RFC738 Section 3"
      }
    ]
  },
  {
    "title": "Bad Request",
    "category": "4×× Client Error",
    "excerpt": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
    "description": "",
    "code": "400",
    "wikipedia":"The request cannot be fulfilled due to bad syntax. General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
        "title": "RFC7231 Section 6.5.1"
      }
    ]
  },
  {
    "title": "Unauthorized",
    "category": "4×× Client Error",
    "excerpt": "The request has not been applied because it lacks valid authentication credentials for the target resource.",
    "description": "<p>The server generating a 401 response MUST send a WWW-Authenticate header field<sup><a href=\"#ref-1\">1</a></sup> containing at least one challenge applicable to the target resource.</p><p>If the request included authentication credentials, then the 401 response indicates that authorization has been refused for those credentials. The user agent MAY repeat the request with a new or replaced Authorization header field<sup><a href=\"#ref-2\">2</a></sup>. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user agent SHOULD present the enclosed representation to the user, since it usually contains relevant diagnostic information.</p>",
    "code": "401",
    "wikipedia":"<p>Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource. See Basic access authentication and Digest access authentication.</p><p>Error code response for missing or invalid authentication token.</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-4.1",
        "title": "RFC7235 Section 4.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-4.2",
        "title": "RFC7235 Section 4.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-3.1",
        "title": "RFC7235 Section 3.1"
      }
    ]
  },
  {
    "title": "Payment Required",
    "category": "4×× Client Error",
    "excerpt": "Reserved for future use.",
    "description": "",
    "code": "402",
    "wikipedia":"Reserved for future use. The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, but that has not happened, and this code is not usually used. As an example of its use, however, Apple's MobileMe service generates a 402 error (\"httpStatusCode:402\" in the Mac OS X Console log) if the MobileMe account is delinquent.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.2",
        "title": "RFC7231 Section 6.5.2"
      }
    ]
  },
  {
    "title": "Forbidden",
    "category": "4×× Client Error",
    "excerpt": "The server understood the request but refuses to authorize it.",
    "description": "<p>A server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).</p><p>If authentication credentials were provided in the request, the server considers them insufficient to grant access. The client SHOULD NOT automatically repeat the request with the same credentials. The client MAY repeat the request with new or different credentials. However, a request might be forbidden for reasons unrelated to the credentials.</p><p>An origin server that wishes to \"hide\" the current existence of a forbidden target resource MAY instead respond with a status code of <a href=\"/resources/http-status-codes/404\">404 Not Found</a>.</p>",
    "code": "403",
    "wikipedia":"The request was a legal request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference. Error code for user not authorized to perform the operation or the resource is unavailable for some reason (e.g. time constraints, etc.).",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.3",
        "title": "RFC7231 Section 6.5.3"
      }
    ]
  },
  {
    "title": "Not Found",
    "category": "4×× Client Error",
    "excerpt": "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.",
    "description": "<p>A 404 status code does not indicate whether this lack of representation is temporary or permanent; the <a href=\"/resources/http-status-codes/410\">410 Gone</a> status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.</p><p>A 404 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "404",
    "wikipedia":"The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible. Used when the requested resource is not found, whether it doesn't exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.4",
        "title": "RFC7231 6.5.4"
      }
    ]
  },
  {
    "title": "Method Not Allowed",
    "category": "4×× Client Error",
    "excerpt": "The method received in the request-line is known by the origin server but not supported by the target resource.",
    "description": "<p>The origin server MUST generate an Allow header field in a 405 response containing a list of the target resource's currently supported methods.</p><p>A 405 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "405",
    "wikipedia":"A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.5",
        "title": "RFC7231 Section 6.5.5"
      }
    ]
  },
  {
    "title": "Not Acceptable",
    "category": "4×× Client Error",
    "excerpt": "The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request1, and the server is unwilling to supply a default representation.",
    "description": "<p>The server SHOULD generate a payload containing a list of available representation characteristics and corresponding resource identifiers from which the user or user agent can choose the one most appropriate. A user agent MAY automatically select the most appropriate choice from that list. However, this specification does not define any standard for such automatic selection, as described in <a href=\"https://tools.ietf.org/html/rfc7231#section-6.4.1\">RFC7231 Section 6.4.1</a>.</p>",
    "code": "406",
    "wikipedia":"The requested resource is only capable of generating content not acceptable according to the Accept headers sent in the request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-5.3",
        "title": "RFC7231 Section 5.3"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.6",
        "title": "RFC7231 Section 6.5.6"
      }
    ]
  },
  {
    "title": "Proxy Authentication Required",
    "category": "4×× Client Error",
    "excerpt": "Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy.",
    "description": "<p>The proxy MUST send a Proxy-Authenticate header field<sup><a href=\"#ref-1\">1</a></sup> containing a challenge applicable to that proxy for the target resource. The client MAY repeat the request with a new or replaced Proxy-Authorization header field<sup><a href=\"#ref-2\">2</a></sup>.</p>",
    "code": "407",
    "wikipedia":"The client must first authenticate itself with the proxy.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-4.3",
        "title": "RFC7235 Section 4.3"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-4.4",
        "title": "RFC7235 Section 4.4"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7235#section-3.2",
        "title": "RFC7235 Section 3.2"
      }
    ]
  },
  {
    "title": "Request Timeout",
    "category": "4×× Client Error",
    "excerpt": "The server did not receive a complete request message within the time that it was prepared to wait.",
    "description": "<p>A server SHOULD send the \"close\" connection option<sup><a href=\"#ref-1\">1</a></sup> in the response, since 408 implies that the server has decided to close the connection rather than continue waiting. If the client has an outstanding request in transit, the client MAY repeat that request on a new connection.</p>",
    "code": "408",
    "wikipedia":"The server timed out waiting for the request. According to W3 HTTP specifications: \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-6.1",
        "title": "RFC7230 Section 6.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.7",
        "title": "RFC7231 Section 6.5.7"
      }
    ]
  },
  {
    "title": "Conflict",
    "category": "4×× Client Error",
    "excerpt": "The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.",
    "description": "<p>The server SHOULD generate a payload that includes enough information for a user to recognize the source of the conflict.</p><p>Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the representation being PUT included changes to a resource that conflict with those made by an earlier (third-party) request, the origin server might use a 409 response to indicate that it can't complete the request. In this case, the response representation would likely contain information useful for merging the differences based on the revision history.</p>",
    "code": "409",
    "wikipedia":"Indicates that the request could not be processed because of conflict in the request, such as an edit conflict. Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries and deleting root objects when cascade-delete is not supported are a couple of examples.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.8",
        "title": "RFC7231 Section 6.5.8"
      }
    ]
  },
  {
    "title": "Gone",
    "category": "4×× Client Error",
    "excerpt": "The target resource is no longer available at the origin server and that this condition is likely to be permanent.",
    "description": "<p>If the origin server does not know, or has no facility to determine, whether or not the condition is permanent, the status code <a href=\"/resources/http-status-codes/404\">404 Not Found</a> ought to be used instead.</p><p>The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server's site. It is not necessary to mark all permanently unavailable resources as \"gone\" or to keep the mark for any length of time -- that is left to the discretion of the server owner.</p><p>A 410 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "410",
    "wikipedia":"Indicates that the resource requested is no longer available and will not be available again. This should be used when a resource has been intentionally removed and the resource should be purged. Upon receiving a 410 status code, the client should not request the resource again in the future. Clients such as search engines should remove the resource from their indices. Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.9",
        "title": "RFC7231 Section 6.5.9"
      }
    ]
  },
  {
    "title": "Length Required",
    "category": "4×× Client Error",
    "excerpt": "The server refuses to accept the request without a defined Content-Length.",
    "description": "<p>The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message body in the request message.</p>",
    "code": "411",
    "wikipedia":"The request did not specify the length of its content, which is required by the requested resource.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-3.3.2",
        "title": "RFC7230 Section 3.3.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.10",
        "title": "RFC7231 Section 6.5.10"
      }
    ]
  },
  {
    "title": "Precondition Failed",
    "category": "4×× Client Error",
    "excerpt": "One or more conditions given in the request header fields evaluated to false when tested on the server.",
    "description": "<p>This response code allows the client to place preconditions on the current resource state (its current representations and metadata) and, thus, prevent the request method from being applied if the target resource is in an unexpected state.</p>",
    "code": "412",
    "wikipedia":"The server does not meet one of the preconditions that the requester put on the request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7232#section-4.2",
        "title": "RFC7232 Section 4.2"
      }
    ]
  },
  {
    "title": "Payload Too Large",
    "category": "4×× Client Error",
    "excerpt": "The server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
    "description": "<p>The server MAY close the connection to prevent the client from continuing the request.</p><p>If the condition is temporary, the server SHOULD generate a Retry-After header field to indicate that it is temporary and after what time the client MAY try again.</p>",
    "code": "413",
    "wikipedia":"The request is larger than the server is willing or able to process.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.11",
        "title": "RFC7231 Section 6.5.11"
      }
    ]
  },
  {
    "title": "Request-URI Too Long",
    "category": "4×× Client Error",
    "excerpt": "The server is refusing to service the request because the request-target1 is longer than the server is willing to interpret.",
    "description": "<p>This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a \"black hole\" of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.</p><p>A 414 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls <sup><a href=\"#ref-2\">2</a></sup>.</p>",
    "code": "414",
    "wikipedia":"The URI provided was too long for the server to process.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-5.3",
        "title": "RFC7230 Section 5.3"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "3"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.12",
        "title": "RFC7231 Section 6.5.12"
      }
    ]
  },
  {
    "title": "Unsupported Media Type",
    "category": "4×× Client Error",
    "excerpt": "The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.",
    "description": "<p>The format problem might be due to the request's indicated Content-Type or Content-Encoding, or as a result of inspecting the data directly.</p>",
    "code": "415",
    "wikipedia":"The request entity has a media type which the server or resource does not support. For example, the client uploads an image as <code>image/svg+xml</code>, but the server requires that images use a different format.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.13",
        "title": "RFC7231 Section 6.5.13"
      }
    ]
  },
  {
    "title": "Requested Range Not Satisfiable",
    "category": "4×× Client Error",
    "excerpt": "None of the ranges in the request's Range header field1 overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.",
    "description": "<p>For byte ranges, failing to overlap the current extent means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected representation. When this status code is generated in response to a byte-range request, the sender SHOULD generate a Content-Range header field specifying the current length of the selected representation<sup><a href=\"#ref-2\">2</a></sup>.</p><p>For example:</p><p>Note: Because servers are free to ignore Range, many implementations will simply respond with the entire selected representation in a <a href=\"/resources/http-status-codes/200\">200 OK</a> response. That is partly because most clients are prepared to receive a <a href=\"/resources/http-status-codes/200\">200 OK</a> to complete the task (albeit less efficiently) and partly because clients might not stop making an invalid partial request until they have received a complete representation. Thus, clients cannot depend on receiving a 416 Range Not Satisfiable response even when it is most appropriate.</p>",
    "code": "416",
    "wikipedia":"The client has asked for a portion of the file, but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7233#section-3.1",
        "title": "RFC7233 Section 3.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7233#section-4.2",
        "title": "RFC7233 Section 4.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7233#section-4.4",
        "title": "RFC7233 Section 4.4"
      }
    ]
  },
  {
    "title": "Expectation Failed",
    "category": "4×× Client Error",
    "excerpt": "The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.",
    "description": "",
    "code": "417",
    "wikipedia":"The server cannot meet the requirements of the Expect request-header field.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-5.1.1",
        "title": "RFC7231 Section 5.1.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.14",
        "title": "RFC7231 Section 6.5.14"
      }
    ]
  },
  {
    "title": "I'm a teapot",
    "category": "4×× Client Error",
    "excerpt": "Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout.",
    "description": "<p>Go HTTP Status Constant <code>http.StatusTeapot</code></p>",
    "code": "418",
    "wikipedia":"This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. However, known implementations do exist. An Nginx HTTP server uses this code to simulate goto-like behaviour in its configuration.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc2324#section-2.3.2",
        "title": "RFC2324 Section 2.3.2"
      }
    ]
  },
  {
    "title": "Misdirected Request",
    "category": "4×× Client Error",
    "excerpt": "The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.",
    "description": "<p>Clients receiving a 421 Misdirected Request response from a server MAY retry the request -- whether the request method is idempotent or not -- over a different connection. This is possible if a connection is reused<sup><a href=\"#ref-1\">1</a></sup>or if an alternative service is selected <a href=\"https://tools.ietf.org/html/rfc7540#ref-ALT-SVC\">ALT-SVC</a>.</p><p>This status code MUST NOT be generated by proxies.</p><p>A 421 response is cacheable by default, i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-2\">2</a></sup>.</p>",
    "code": "421",
    "wikipedia":"",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7540#section-9.1.1",
        "title": "RFC7540 Section 9.1.1"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7540#section-9.1.2",
        "title": "RFC7540 Section 9.1.2"
      }
    ]
  },
  {
    "title": "Unprocessable Entity",
    "category": "4×× Client Error",
    "excerpt": "The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.",
    "description": "<p>For example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but semantically erroneous, XML instructions.</p>",
    "code": "422",
    "wikipedia":"The request was well-formed but was unable to be followed due to semantic errors.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-11.2",
        "title": "RFC4918 Section 11.2"
      }
    ]
  },
  {
    "title": "Locked",
    "category": "4×× Client Error",
    "excerpt": "The source or destination resource of a method is locked.",
    "description": "<p>This response SHOULD contain an appropriate precondition or postcondition code, such as 'lock-token-submitted' or 'no-conflicting-lock'.</p>",
    "code": "423",
    "wikipedia":"The resource that is being accessed is locked.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-11.3",
        "title": "RFC4918 Section 11.3"
      }
    ]
  },
  {
    "title": "Failed Dependency",
    "category": "4×× Client Error",
    "excerpt": "The method could not be performed on the resource because the requested action depended on another action and that action failed.",
    "description": "<p>For example, if a command in a PROPPATCH method fails, then, at minimum, the rest of the commands will also fail with 424 Failed Dependency.</p>",
    "code": "424",
    "wikipedia":"The request failed due to failure of a previous request (e.g. a PROPPATCH).",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-11.4",
        "title": "RFC4918 Section 11.4"
      }
    ]
  },
  {
    "title": "Upgrade Required",
    "category": "4×× Client Error",
    "excerpt": "The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.",
    "description": "<p>The server MUST send an Upgrade header field in a 426 response to indicate the required protocol(s)<sup><a href=\"#ref-1\">1</a></sup></p><p>Example:</p>",
    "code": "426",
    "wikipedia":"The client should switch to a different protocol such as TLS/1.0.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7230#section-6.7",
        "title": "RFC7230 Section 6.7"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.5.15",
        "title": "RFC7231 Section 6.5.15"
      }
    ]
  },
  {
    "title": "Precondition Required",
    "category": "4×× Client Error",
    "excerpt": "The origin server requires the request to be conditional.",
    "description": "<p>Its typical use is to avoid the \"lost update\" problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. By requiring requests to be conditional, the server can assure that clients are working with the correct copies.</p><p>Responses using this status code SHOULD explain how to resubmit the request successfully. For example:</p><p>Responses with the 428 status code MUST NOT be stored by a cache.</p>",
    "code": "428",
    "wikipedia":"The origin server requires the request to be conditional. Intended to prevent \"the \"lost update\" problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc6585#section-3",
        "title": "RFC6585 Section 3"
      }
    ]
  },
  {
    "title": "Too Many Requests",
    "category": "4×× Client Error",
    "excerpt": "The user has sent too many requests in a given amount of time (\"rate limiting\").",
    "description": "<p>The response representations SHOULD include details explaining the condition, and MAY include a Retry-After header indicating how long to wait before making a new request.</p><p>For example:</p><p>Note that this specification does not define how the origin server identifies the user, nor how it counts requests. For example, an origin server that is limiting request rates can do so based upon counts of requests on a per-resource basis, across the entire server, or even among a set of servers. Likewise, it might identify the user by its authentication credentials, or a stateful cookie.</p><p>Responses with the 429 status code MUST NOT be stored by a cache.</p>",
    "code": "429",
    "wikipedia":"The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc6585#section-4",
        "title": "RFC6585 Section 4"
      }
    ]
  },
  {
    "title": "Request Header Fields Too Large",
    "category": "4×× Client Error",
    "excerpt": "The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.",
    "description": "<p>It can be used both when the set of request header fields in total is too large, and when a single header field is at fault. In the latter case, the response representation SHOULD specify which header field was too large.</p><p>For example:</p><p>Responses with the 431 status code MUST NOT be stored by a cache.</p>",
    "code": "431",
    "wikipedia":"The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc6585#section-5",
        "title": "RFC6585 Section 5"
      }
    ]
  },
  {
    "title": "Connection Closed Without Response",
    "category": "4×× Client Error",
    "excerpt": "A non-standard status code used to instruct <a href=\"https://nginx.org\">nginx</a> to close the connection without sending a response to the client, most commonly used to deny malicious or malformed requests.",
    "description": "<p>This status code is not seen by the client, it only appears in nginx log files.</p>",
    "code": "444",
    "wikipedia":"An Nginx HTTP server extension. The server returns no information to the client and closes the connection (useful as a deterrent for malware).",
    "links": []
  },
  {
    "title": "Unavailable For Legal Reasons",
    "category": "4×× Client Error",
    "excerpt": "The server is denying access to the resource as a consequence of a legal demand.",
    "description": "<p>The server in question might not be an origin server. This type of legal demand typically most directly affects the operations of ISPs and search engines.</p><p>Responses using this status code SHOULD include an explanation, in the response body, of the details of the legal demand: the party making it, the applicable legislation or regulation, and what classes of person and resource it applies to. For example:</p><p>The use of the 451 status code implies neither the existence nor non- existence of the resource named in the request. That is to say, it is possible that if the legal demands were removed, a request for the resource still might not succeed.</p><p>Note that in many cases clients can still access the denied resource by using technical countermeasures such as a VPN or the Tor network.</p><p>A 451 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls; see <a href=\"https://tools.ietf.org/html/rfc7234\">RFC7234</a>.</p>",
    "code": "451",
    "wikipedia":"Intended to be used when resource access is denied for legal reasons, e.g. censorship or government-mandated blocked access. A reference to the 1953 dystopian novel Fahrenheit 451, where books are outlawed, and the autoignition temperature of paper, 451°F.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7725",
        "title": "RFC 7725"
      }
    ]
  },
  {
    "title": "Client Closed Request",
    "category": "4×× Client Error",
    "excerpt": "A non-standard status code introduced by <a href=\"https://nginx.org\">nginx</a> for the case when a client closes the connection while nginx is processing the request.",
    "description": "",
    "code": "499",
    "wikipedia":"An Nginx HTTP server extension. This code is introduced to log the case when the connection is closed by client while HTTP server is processing its request, making server unable to send the HTTP header back.",
    "links": []
  },
  {
    "title": "Internal Server Error",
    "category": "5×× Server Error",
    "excerpt": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
    "description": "",
    "code": "500",
    "wikipedia":"<p>A generic error message, given when no more specific message is suitable. The general catch-all error when the server-side throws an exception.</p>",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.1",
        "title": "RFC7231 Section 6.6.1"
      }
    ]
  },
  {
    "title": "Not Implemented",
    "category": "5×× Server Error",
    "excerpt": "The server does not support the functionality required to fulfill the request.",
    "description": "<p>This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.</p><p>A 501 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls<sup><a href=\"#ref-1\">1</a></sup>.</p>",
    "code": "501",
    "wikipedia":"The server either does not recognise the request method, or it lacks the ability to fulfill the request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7234#section-4.2.2",
        "title": "RFC7234 Section 4.2.2"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.2",
        "title": "RFC7231 Section 6.6.2"
      }
    ]
  },
  {
    "title": "Bad Gateway",
    "category": "5×× Server Error",
    "excerpt": "The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.",
    "description": "",
    "code": "502",
    "wikipedia":"The server was acting as a gateway or proxy and received an invalid response from the upstream server.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.3",
        "title": "RFC7231 Section 6.6.3"
      }
    ]
  },
  {
    "title": "Service Unavailable",
    "category": "5×× Server Error",
    "excerpt": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
    "description": "<p>The server MAY send a Retry-After header field<sup><a href=\"#ref-1\">1</a></sup> to suggest an appropriate amount of time for the client to wait before retrying the request.</p><p>Note: The existence of the 503 status code does not imply that a server has to use it when becoming overloaded. Some servers might simply refuse the connection.</p>",
    "code": "503",
    "wikipedia":"The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-7.1.3",
        "title": "RFC7231 Section 7.1.3"
      },
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.4",
        "title": "RFC7231 Section 6.6.4"
      }
    ]
  },
  {
    "title": "Gateway Timeout",
    "category": "5×× Server Error",
    "excerpt": "The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.",
    "description": "The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.",
    "code": "504",
    "wikipedia":"",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.5",
        "title": "RFC7231 Section 6.6.5"
      }
    ]
  },
  {
    "title": "HTTP Version Not Supported",
    "category": "5×× Server Error",
    "excerpt": "The server does not support, or refuses to support, the major version of HTTP that was used in the request message.",
    "description": "<p>The server is indicating that it is unable or unwilling to complete the request using the same major version as the client, as described in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.6\">Section 2.6 of RFC7230</a>, other than with this error message. The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.</p>",
    "code": "505",
    "wikipedia":"The server does not support the HTTP protocol version used in the request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc7231#section-6.6.6",
        "title": "RFC7231 Section 6.6.6"
      }
    ]
  },
  {
    "title": "Variant Also Negotiates",
    "category": "5×× Server Error",
    "excerpt": "The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.",
    "description": "Transparent content negotiation for the request results in a circular reference.",
    "code": "506",
    "wikipedia":"",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc2295#section-8.1",
        "title": "RFC2295 Section 8.1"
      }
    ]
  },
  {
    "title": "Insufficient Storage",
    "category": "5×× Server Error",
    "excerpt": "The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.",
    "description": "<p>This condition is considered to be temporary. If the request that received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.</p>",
    "code": "507",
    "wikipedia":"The server is unable to store the representation needed to complete the request.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc4918#section-11.5",
        "title": "RFC4918 Section 11.5"
      }
    ]
  },
  {
    "title": "Loop Detected",
    "category": "5×× Server Error",
    "excerpt": "The server terminated an operation because it encountered an infinite loop while processing a request with \"Depth: infinity\". This status indicates that the entire operation failed.",
    "description": "",
    "code": "508",
    "wikipedia":"The server detected an infinite loop while processing the request (sent in lieu of 208).",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc5842#section-7.2",
        "title": "RFC5842 Section 7.2"
      }
    ]
  },
  {
    "title": "Not Extended",
    "category": "5×× Server Error",
    "excerpt": "The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request.",
    "description": "<p>It is outside the scope of this specification to specify how the extensions inform the client.</p><p>If the 510 response contains information about extensions that were not present in the initial request then the client MAY repeat the request if it has reason to believe it can fulfill the extension policy by modifying the request according to the information provided in the 510 response. Otherwise the client MAY present any entity included in the 510 response to the user, since that entity may include relevant diagnostic information.</p>",
    "code": "510",
    "wikipedia":"Further extensions to the request are required for the server to fulfill it.",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc2774#section-7",
        "title": "RFC2774 Section 7"
      }
    ]
  },
  {
    "title": "Network Authentication Required",
    "category": "5×× Server Error",
    "excerpt": "The client needs to authenticate to gain network access.",
    "description": "<p>The response representation SHOULD contain a link to a resource that allows the user to submit credentials (e.g., with an HTML form).</p><p>Note that the 511 response SHOULD NOT contain a challenge or the login interface itself, because browsers would show the login interface as being associated with the originally requested URL, which may cause confusion.</p><p>The 511 status SHOULD NOT be generated by origin servers; it is intended for use by intercepting proxies that are interposed as a means of controlling access to the network.</p><p>Responses with the 511 status code MUST NOT be stored by a cache.</p><p>The 511 status code is designed to mitigate problems caused by \"captive portals\" to software (especially non-browser agents) that is expecting a response from the server that a request was made to, not the intervening network infrastructure. It is not intended to encourage deployment of captive portals -- only to limit the damage caused by them.</p><p>A network operator wishing to require some authentication, acceptance of terms, or other user interaction before granting access usually does so by identifying clients who have not done so (\"unknown clients\") using their Media Access Control (MAC) addresses.</p><p>Unknown clients then have all traffic blocked, except for that on TCP port 80, which is sent to an HTTP server (the \"login server\") dedicated to \"logging in\" unknown clients, and of course traffic to the login server itself.</p><p>For example, a user agent might connect to a network and make the following HTTP request on TCP port 80:</p><p>Upon receiving such a request, the login server would generate a 511 response:</p><p>Here, the 511 status code assures that non-browser clients will not interpret the response as being from the origin server, and the META HTML element redirects the user agent to the login server.</p>",
    "code": "511",
    "wikipedia":"The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).",
    "links": [
      {
        "href": "https://tools.ietf.org/html/rfc6585#section-6",
        "title": "RFC6585 Section 6"
      }
    ]
  },
  {
    "title": "Network Connect Timeout Error",
    "category": "5×× Server Error",
    "excerpt": "This status code is not specified in any RFCs, but is used by some HTTP proxies to signal a network connect timeout behind the proxy to a client in front of the proxy.",
    "description": "",
    "code": "599",
    "wikipedia":"This status code is not specified in any RFCs, but is used by some HTTP proxies to signal a network connect timeout behind the proxy to a client in front of the proxy.",
    "links": []
  }
]